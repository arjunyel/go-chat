// Code generated by protoc-gen-go.
// source: gochat.proto
// DO NOT EDIT!

/*
Package gochat is a generated protocol buffer package.

It is generated from these files:
	gochat.proto

It has these top-level messages:
	SendChat
	ReceiveChat
*/
package gochat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendChat struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SendChat) Reset()                    { *m = SendChat{} }
func (m *SendChat) String() string            { return proto.CompactTextString(m) }
func (*SendChat) ProtoMessage()               {}
func (*SendChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SendChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReceiveChat struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ReceiveChat) Reset()                    { *m = ReceiveChat{} }
func (m *ReceiveChat) String() string            { return proto.CompactTextString(m) }
func (*ReceiveChat) ProtoMessage()               {}
func (*ReceiveChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReceiveChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReceiveChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SendChat)(nil), "gochat.SendChat")
	proto.RegisterType((*ReceiveChat)(nil), "gochat.ReceiveChat")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupChat service

type GroupChatClient interface {
	Chat(ctx context.Context, in *SendChat, opts ...grpc.CallOption) (*ReceiveChat, error)
}

type groupChatClient struct {
	cc *grpc.ClientConn
}

func NewGroupChatClient(cc *grpc.ClientConn) GroupChatClient {
	return &groupChatClient{cc}
}

func (c *groupChatClient) Chat(ctx context.Context, in *SendChat, opts ...grpc.CallOption) (*ReceiveChat, error) {
	out := new(ReceiveChat)
	err := grpc.Invoke(ctx, "/gochat.GroupChat/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupChat service

type GroupChatServer interface {
	Chat(context.Context, *SendChat) (*ReceiveChat, error)
}

func RegisterGroupChatServer(s *grpc.Server, srv GroupChatServer) {
	s.RegisterService(&_GroupChat_serviceDesc, srv)
}

func _GroupChat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gochat.GroupChat/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).Chat(ctx, req.(*SendChat))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gochat.GroupChat",
	HandlerType: (*GroupChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _GroupChat_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gochat.proto",
}

func init() { proto.RegisterFile("gochat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcf, 0x4f, 0xce,
	0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x2c, 0xb8, 0x38,
	0x82, 0x53, 0xf3, 0x52, 0x9c, 0x33, 0x12, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2,
	0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0xb0, 0x30, 0x8c, 0xab, 0x64, 0xcd, 0xc5, 0x1d, 0x94, 0x9a,
	0x9c, 0x9a, 0x59, 0x96, 0x4a, 0xba, 0x66, 0x23, 0x1b, 0x2e, 0x4e, 0xf7, 0xa2, 0xfc, 0xd2, 0x02,
	0xb0, 0x56, 0x7d, 0x2e, 0x16, 0x30, 0x2d, 0xa0, 0x07, 0x75, 0x22, 0xcc, 0x45, 0x52, 0xc2, 0x30,
	0x11, 0x24, 0x9b, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x7e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x1f, 0xaa, 0x3c, 0x21, 0xd3, 0x00, 0x00, 0x00,
}
